from datetime import timedelta, date
from dateutil.parser import parse
white_list = [
'2024-01-01', '2024-01-02', '2024-02-23','2024-03-08', '2024-05-01','2024-05-09', '2024-06-12','2024-11-04',
'2023-01-02', '2023-02-23', '2023-03-08', '2023-05-01', '2023-05-09', '2023-06-12',
'2022-03-07', '2022-03-08', '2022-05-02', '2022-05-03', '2022-05-09', '2022-05-10', '2022-06-13', '2022-11-04',
'2021-01-01', '2021-01-07', '2021-02-23', '2021-03-08', '2021-05-03', '2021-05-10', '2021-06-14', '2021-11-04','2021-12-31',
'2020-01-01', '2020-01-02', '2020-01-07', '2020-02-24', '2020-03-09', '2020-05-01', '2020-05-11', '2020-06-12', '2020-06-24','2020-07-01', '2020-11-04','2020-12-31',
'2019-01-01', '2019-01-02', '2019-01-07', '2019-03-08', '2019-05-01', '2019-05-09', '2019-06-12', '2019-11-04', '2019-12-31',
'2018-01-01', '2018-01-02', '2018-01-08', '2018-03-08', '2018-05-01', '2018-05-09', '2018-06-12', '2018-11-05', '2018-12-31',
'2017-01-02', '2017-02-23', '2017-03-08', '2017-05-01', '2017-05-08', '2017-05-09', '2017-06-12', '2017-11-06',
'2016-01-01', '2016-01-07', '2016-01-08', '2016-02-23', '2016-03-08', '2016-05-02', '2016-05-03', '2016-03-09', '2016-06-13', '2016-11-04',
'2015-01-01', '2015-01-02', '2015-01-07', '2015-02-23', '2015-03-09', '2015-05-01', '2015-05-04', '2015-05-11', '2015-06-12', '2015-11-04', '2015-12-31',
'2014-01-01', '2014-01-02', '2014-01-03', '2014-01-07', '2014-03-10', '2014-05-01', '2014-05-09', '2014-06-12', '2014-11-04', '2014-12-31',
'2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04', '2013-01-07', '2013-03-08', '2013-05-01', '2013-05-09', '2013-06-12', '2013-11-04', '2013-12-31',
'2012-01-02', '2012-02-23', '2012-03-08', '2012-03-09', '2012-04-30', '2012-05-01', '2012-05-09', '2012-06-11', '2012-06-12', '2012-11-05', '2012-12-31',
]
black_list = ['2024-12-28', '2024-11-02', '2024-04-27', '2021-02-20', '2018-06-09', '2018-12-29', '2016-02-20', '2012-03-11', '2012-04-28', '2012-05-05', '2012-05-12', '2012-06-09', ]
def check_date(day_check):
    if black_list.count(day_check.strftime('%Y-%m-%d')):
        return True
    if day_check.isoweekday() in [1,2,3,4,5] and not white_list.count(day_check.strftime('%Y-%m-%d')):
        return True
    else:
        return False
def func_moex_trade_dates(date_start=date.today(),days_to_subtract=10,mode=1):
    date_start = parse(str(date_start)).date()
    days_list = []
    n = 0
    while n < days_to_subtract:
        if check_date(date_start):
            days_list.insert(0, date_start.strftime("%Y-%m-%d"))
            n += 1
        date_start = date_start - timedelta(days=1)
    if mode == 1: # Returns a list of trading days from the date with the specified depth # Возвращает список  торговых дней от даты с  указанной глубиной
        return days_list
    elif mode == 2: # Returns the first day from the date with the specified depth # Возвращает первый день от даты с  указанной глубиной
        return days_list[0]
    elif mode == 3: # Returns the first day and the previous day from the date with the specified depth # Возвращает первый день и предыдущий день от даты с  указанной глубиной
        return [days_list[0],days_list[-2]]
